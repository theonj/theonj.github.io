---
layout: post
status: publish
published: true
title: Why Do Software Engineers Struggle in a Market of High Demand? (Focus on the
  Bay Area)
author:
  display_name: Angela Hontau
  login: torchwood909
  email: angelahontau@gmail.com
  url: ''
author_login: torchwood909
author_email: angelahontau@gmail.com
wordpress_id: 1079
wordpress_url: http://theonj.com/?p=1079
date: '2013-07-01 18:33:34 -0400'
date_gmt: '2013-07-01 18:33:34 -0400'
categories:
- Business Articles
- Articles I Like
tags: []
---
<p>First and foremost, I contend that all code which does not take into account the fact that other engineers must at some point or another work with it, is badly written. </p>
<p>Coding for the computer alone will get the work done, and fool many mangers into believing they have found a great software engineer. However, this creates a plethora of technical debt, and too many unnecessary obstacles for the engineer who has to figure out this highly convoluted and badly written code. Because of this, the value of a skilled software engineer is often miscalculated. An application that works well is not the only criteria for judging an engineer's abilities. <strong>A software engineer's code can only be considered efficient when it can be understood by another engineer.</strong></p>
<p>Therefore, the most pertinent obstacle to employing skilled software engineers comes from the lack emphasis on clean code, best practices, and the consequences of technical debt. I contend that most interviews are looking for these particular skills and this is why so many companies end up with programmers who can do the job, but who do it badly. They incur the company so much technical debt that in the long run, they can do so much damage that the current high profits do not justify the long term costs.</p>
<p>When another engineer has to work with this code, he is placed in the terrible difficulty of untangling its unnecessary complexity. Even worse, this is likely to reflects on him, and the company is likely to lose a skilled engineer simply because they do realize that the problem begun long before he started working. </p>
<p>As a result, companies end up with many unskilled engineers work faster by writing for the computer alone and do so, not only to look good (by completing a tak quickly), but also as a means of securing their job. As I have stated at the start of my article, my contention is that most interviews are conducted badly. </p>
<p>I will follow with a few examples which I have gathered from secondary sources or first hand experience. I will end the article with a few real life hypothetical examples which explain how having a inadequate interview process, and ending up with inefficient programmers, can harm the business from a financial perspective. </p>
<p>On a recent interview, the first question was: "Where are you from?" probably prompted by my accent and by an interviewer who is unaware that this is in fact illegal. </p>
<p>The second question was "When did you arrive in the United States?" followed by a plethora of unrelated questions such as "In one sentence, can you describe your life's philosophy?" As I am studying philosophy, I can speak on the subject for hours, however, most philosophies are too complex to describe in one sentence without the end result becoming one of great confusion on the part of the interviewer. He then told me that my resume speaks for itself and he knows that I am skilled, and is therefore testing my personality. However, as he is probably not a trained psychologist, I doubt he could actually assess my personality from a few questions which were all asked in about twenty minutes. In that short time, I am not sure I can asses the character of a dog or a cat, and certainly not a human. </p>
<p>Another example of a badly ran interview was one in which, the interviewer asked me questions which a student from programming 101 could answer. They were all based on syntax. However, a great programmer is not one has memorized the syntax of the language, which he can look up in a few minutes, but on who can understands how the programming language should be used. Here I would argue questions regarding the best practices of programming are much more pertinent. I was particularly shocked when he begun to argue with me about the great wisdom of using eval(). </p>
<p>If the technical interviewers themselves are unaware of bad programming practices, there is little hope that they can actually hire an excellent software engineer. And as a result companies are frustrated in their search for great software engineers, but their own interview process is designed to eliminate the programmers who through work experience have a keen understanding of correct application of the programming language, which is much more important that their ability to memorize the exact syntax.</p>
<p>Moreover, an obsession with the programmer's personality is counterintuitive. Here the most charismatic and or the best liars will do much better than the honest programmer whose mind is focused on the work itself. To make this statement more clear, I am referring to the fact, that most people with strong work ethics are likely to focus on their work during working hours, and any outside hobbies, such as golf, surfing, photography, cannot influence their work performance. I found myself in an interview in which the interviewer dismissed it as unimportant that I graduated Summa Cum Laude, which I used as an example of the fact that I am a fast learner and highly capable of teaching myself through research, reading and coding. Instead he wanted to know more about me as regard to my hobbies, but as I mentioned before, that is a thoroughly poor assessment of a any employees skills. In fact I propose that for a company to run well, the personal life of its employees should remain personal unless they themselves would prefer to divulge the information. I cannot understand how it can help the interviewer to know that a software engineer has a passion for golf in his time off. Since this is not an actual study, I should not included it here, but I will because it can become the hypothesis for a statistical study. In my own experience I have asked people who work in other fields (doctors, electricians, constructor engineers, etc.), if their interviewers took great interest in their hobbies. Overall their answer was "no." Which makes me wonder why in the software engineer field, these questions are asked so often. It does much more than focus the interviewer away from the pertinent issue of finding a great software engineer. From what I have been told these questions are asked because the interviewer is looking for a specific answer, which is that the hobby is also programming or other computer-related interests, such as networking, graphics design, etc. In other words, the interviewer is looking for engineers whose only interest is coding, even outside of work. This is actually the case with many software engineers. This career is one in which most people will never last long, unless they really love what they do. As a result, most software engineers program in their free time, read pertinent articles from <a href="http://www.wired.com/" target = "blank">Wired.com</a>, <a href="http://www.engadget.com/" target = "blank">Engadget.com</a>, <a href="http://thehackernews.com/" target = "blank">Hackernews.com</a>, Dr. Bob's Best Practices, etc. However, if I were the hiring manger I would love it if my employee had a fuller life, with more interests. For instance, I think it is unfair to look down upon an employee who is interested in Golf, because like many other sports, Golf is relaxing. In a highly stressful industry, hobbies and interests can make a person's life more complete can also make him a better worker. He or she is less likely to burn out from the stress of doing nothing but coding at work and after office hours. In fact, it has been shown by several studies that exercise is one of the ways in which the mind can be recharged to such a level that a software engineer who take some time off for Golf (or any other sport/exercise), is likely to code better than the the engineers work have no hobbies.</p>
<p>To summarize the contents of this article, I have found through secondary sources and personal experience that it is the badly conducted interviews, which keep companies from acquiring skilled software engineers, who then in need of money, take the first job offered to them even if it is one for which they are not well suited due to lack of interest. To be more explicit, several programmers, prefer to work with their language of expertise. However, if a series of badly conducted interviews keeps them away from it, they will settle to jobs which they find unfulfilling. <em>The reason for this statement is that as I am writing this article my email is inundated by positions sent randomly by recruiters who have not read my resume, and who believe that placing the word Senior in front of Software Engineer is all that is needed to attract my desire regarding a position. </em> Therefore, I must add that recruiters who push jobs that overlook the interest and skill set of the programmer (mostly because they sent the emails randomly and without reading the resume), add to the problem. They make it much harder for me to find a job that I love, because instead of adhering to my interests, they want to force me into a position for which they feel they would gain the highest commission. If they succeed, I am not surprised if the programmer becomes unhappy with his job, and thus the high number of job turnovers in this industry. I have been deceived by recruiters so often that I cannot help but wonder why the companies do not interview employees directly. It will save them the commission which they pay recruiters. Most importantly, in this way, the software engineers would apply to the companies which interest them, without any misleading information from the recruiters, who have on many occasions altered the job requirements when I made an objection to them, simply because it is their interest for me to take the job - even if it is not a good fit for me or for my employer, for the time while I am working there, they are receiving their commission. In this way, the recruiters get rich at the expense of the employers and the employees. Unfortunately, the end result is that both the company and the software engineers become embittered and more defensive toward the industry as a whole. While working in Washington, DC, I did not use recruiters for any of the jobs I had there, and as a result, I can honestly say that I enjoyed my jobs thoroughly and that the companies profited highly from my skills.  </p>
<p>***</p>
<p>Although my article ends here, I am adding a prelude, which is just a example of the real life problems which a badly written software application can bring about. As a business major with the focus on computers and their impact on businesses it is for me important to show the far reaching consequences of bad interviews, bad recruiters, and bad management, all combined are obstacles to skilled software engineers using their skills to make a company work efficiently for the increase in profits. Making a profit is the primary goal of every company, in fact, it is the reason for its existence. Therefore, the business major in me is eager to see companies fight for better software engineers and benefiting from their skills by improving the ways in which they interview, and by carefully choosing the recruiters with which they work.</p>
<p>A supermarket, for instance, can function well if it has an efficient warehouse management system. This system ensures that the entire supermarket runs smoothly, and that the products are delivered when they are depleted. If this system goes wrong the supermarket can end up with a surplus of cortisone cream and not enough demand for it, white lacking in a product that sells extremely well (let's say condoms), but which the computer failed to register how quickly this product has disappeared off the shelves. A bug in the system such as the one I hypothetically described above is counterproductive. However I can think of even greater problems, if the system cannot run because the queries are not optimized, and shuts down, the entire warehouse will have no date on what products are needed, and this can only be redeemed by sending surplus of most products and since most supermarket items are perishable, the monetary loss can become too great for the company to bear (and if this market is not a chain, it might even go bankrupt just because of one error made by bad programming). Most supermarkets employ the FIFO system, which the warehouse  management system monitors in the most cost effective way, to optimize sales and minimize losses (waste - i.e perishable products which were sent in overabundance in respect to demand). With perishable products one has to consider that if they have gone bad are still for sale, they can cause an epidemic of ill customers, followed a plethora of lawsuits, and a damaged reputation. This example is intended to show the importance of well coded programs and the effect that a critical error in the code can have on the succes of a corporation. I also wanted to explain why skilled software engineers are critical for the current infrastructure. </p>
<p>Another quick example comes from my personal experience. While working in the telecommunications industry, I realized how critical it is to keep the antenas in working order since the loss of signal for cell phones for even a overly short duration (such as 5-10 min) can give the companies a world of problems from its outraged customers. As a customer myself if my telephone stopped working just as I expected a telephone call regarding a job interview, I would blame the companies for potentially making me lose respect in the eyes of my potential future employers, which brings me to the title of the article. If this skilled software engineers are so critical, why is it that so many of them are unemployed.</p>
